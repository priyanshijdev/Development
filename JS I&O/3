const a = { x: 1 };
const b = { x: 1 };

console.log(a === b); //  false

 Why? Because objects are reference types in JavaScript. 
 The === operator only checks if they point to the same memory location, not if their contents are equal.


--------------------------------------------------------------------------------------------------------------------------------------------------------

function processing() {
  return new Promise((resolve, reject) => {
    resolve(1);
    reject("Failed");
    resolve(2);
    console.log("After resolve/reject");
  });
}

function init() {
  processing()
    .then((v) => console.log(v + 1))
    .catch((err) => console.log(err));
}

init();

EXPLAINATION:


resolve(1) is called — this settles the promise.

reject("Failed") and resolve(2) are ignored because a promise can only be settled once — either resolved or rejected, but not both or more than once.

The console.log("After resolve/reject") will still execute immediately, as it’s just a synchronous statement inside the executor function.

In .then((v) => console.log(v + 1)), v is 1, so it logs 2.

o/p: 
After resolve/reject
2
-----------------------------------------------------------------------------------------------------------------------------------------------------


let a =[1,2];
let b=a;
a=[2,34,90];

console.log(a);
console.log(b);


o/p:
[ 2, 34, 90 ]
[ 1, 2 ]
