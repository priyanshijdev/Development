const a = { x: 1 };
const b = { x: 1 };

console.log(a === b); //  false

 Why? Because objects are reference types in JavaScript. 
 The === operator only checks if they point to the same memory location, not if their contents are equal.


--------------------------------------------------------------------------------------------------------------------------------------------------------

function processing() {
  return new Promise((resolve, reject) => {
    resolve(1);
    reject("Failed");
    resolve(2);
    console.log("After resolve/reject");
  });
}

function init() {
  processing()
    .then((v) => console.log(v + 1))
    .catch((err) => console.log(err));
}

init();

EXPLAINATION:


resolve(1) is called — this settles the promise.

reject("Failed") and resolve(2) are ignored because a promise can only be settled once — either resolved or rejected, but not both or more than once.

The console.log("After resolve/reject") will still execute immediately, as it’s just a synchronous statement inside the executor function.

In .then((v) => console.log(v + 1)), v is 1, so it logs 2.

o/p: 
After resolve/reject
2
-----------------------------------------------------------------------------------------------------------------------------------------------------


let a =[1,2];
let b=a;
a=[2,34,90];

console.log(a);
console.log(b);


o/p:
[ 2, 34, 90 ]
[ 1, 2 ]

---------------------------------------------------------------------------------------------------
console.log(typeof null); // Output?
console.log(1 + "2" + "2"); // Output?
console.log([] + []); // Output?


OUTPUT:
object 
122
""

------------------------------------------------------------------------------------------

console.log("A");

setTimeout(() => {
  console.log("B");
});

['C', 'D'].forEach((x) =>
  console.log(x)
);

console.log("E");


Output:
A
C
D
E
B

WHY????

console.log(): Executes immediately — synchronous.

setTimeout(): Schedules a function to run asynchronously — after the current call stack is cleared.

If no delay is given (like here), the default is 0ms, but it's still deferred to the task queue.

forEach(): Also synchronous — executes immediately.
