console.log(+true ) > 1 
  console.log(+false ) > 0
console.log(+null ) > 0 
  console.log(+"123 ) >123

----------------------------------------------------------------------------------------------------------------------------------------------------------
console.log('1' ): 
setTimeout(() =>{ console.log('2'},0)
console.log('3' )

//  whenever JS will see the asyn task like console.log it will execute it first 
// call stack   
// Micro task queye   --> async 
// macroTASk -  setTime
/// OUput : 1 3 2 
------------------------------------------------------------------------------------------------------------------------
cons [x,y=5] =[10];
log(x+y)

// 15
destructing >> x= 10 and y= undefined 

------------------------------------------------------------------------------------------------------------------------
let x= 1 || 2 && 3
log(x)


Output:1 
so , and > OR 1 || 1 (T&&T)
1 || 3 >> 1
------------------------------------------------------------------------------------------------------------------------

const arr =[1,2];
for(var i=0;<n; i++ 3)
setTimeout(() =>{
log(i)
},1000);

------------------------------------------------------------------------------------------------------------------------
js Output Qs:

Q1: 
let c = { greeting: 'Hey!' };
let d;

d = c;
c.greeting = 'Hello';
console.log(d.greeting)

Ouput: Hello
------------------------------------------------------------------------------------------------------------------------
Q2:
let a = 3;
let b = new Number(3);
let c = 3;

console.log(a == b);
console.log(a === b);
console.log(b === c)

T F F 

------------------------------------------------------------------------------------------------------------------------
Q3. What are the three phases of event propagation?
A: Target > Capturing > Bubbling
B: Bubbling > Target > Capturing
C: Target > Bubbling > Capturing
D: Capturing > Target > Bubbling

Answer/ Output:D
During the capturing phase, the event goes through the ancestor elements down to the target element. 
It then reaches the target element, and bubbling begins.

/// 2 2 
--------------------------------------------------------------------------------------------------------------------------

console.log("5" + 3); // "53" (string) ‚û°Ô∏è `+` concatenates 
console.log("5" - 3); // 2 (number) ‚û°Ô∏è `-` converts to number
console.log(typeof NaN); // "number" 


console.log([] == false); // true  (Empty array is coerced to `""`, then `0`) 
console.log({} == false); // false ‚úÖ (Object is not converted) 

console.log([] + []); // "" (empty string) ü§Ø 
console.log([] + {}); // "[object Object]" (String conversion) 
console.log({} + []); // 0 (Wait, what? ü§î JS fun!)

